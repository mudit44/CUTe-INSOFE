data
df1 = data[which.max(mpg)]
df1 = data[which.max(data$mpg)]
df1 = data[which.max(data$mpg),]
df1
x[2,3]
x
#Different ways to subset a dataset
subset_eg1<-subset(data1,select = c(1))
subset_eg1
#Different ways to subset a dataset
subset_eg1<-subset(data1,select = c(1))
subset_eg2<-subset(data1,select = c(mpg,vs))
subset_eg3<-subset(data1,select = c(mpg:disp))
subset_eg4<-subset(data1,select = c(1:4))
#condition to select rows mpg greater than 25 in mtcars dataset
subset(data1,mpg>25,select = hp)
#create a column $grade if mpg > 25 then grade == 1 and mpg < 25 then grade == 2
df1 = data1$grade = ifelse(df$mpg>25,1,2)
df1
help(databases)
help(load(databases))
library()
library(datasets)
r = library(datasets)
r
library(datasets)
r = library(datasets)
r = library(datasets)
r
help(library(datasets))
data()
#create another column if mpg > 25 good, 25 > mpg > 20 average , < 20 is bad
data1$grade2 = ifelse(sorted$mpg>25,"1",ifelse(sorted$mpg>18,"2","3"))
?plot
plot(x=c(MergedData2$ExamMarch,MergedData2$ExamSeptember),y=mean(MergedData2$percent))
rm(list=ls())
setwd('C:/Users/Mudit/Desktop/INSOFE/R_assignment')
exam = read.csv('Exam.csv',header = TRUE,na.strings = c('',' ',NA,'#','?','March '))
marks = read.csv('Marks.csv',header = TRUE,na.strings = c('',' ',NA,'#','?'))
#Sum of NA
sum(is.na(exam))
sum(is.na(marks))
MergedData<-merge(exam,marks,by.x="Student.ID",by.y="Studen.ID")
str(MergedData)
num_data <- subset(MergedData,select = -c(Student.ID,Exam))
cat_data <- subset(MergedData,select = c(Student.ID,Exam))
library(DMwR)
num_data_mod<-centralImputation(num_data) #Cenral Imputation
sum(is.na(num_data_mod))
table(MergedData$Exam)
num_data_mod$ID <- seq.int(nrow(num_data))
MergedData2 <- merge(cat_data,num_data_mod,by.x='Student.ID',by.y='ID')
str(MergedData2)
MergedData2$Subject.B <- as.integer(MergedData2$Subject.B)
MergedData2$total = apply(MergedData2[,3:7], 1, sum)
MergedData2$percent = MergedData2$total / 5
MergedData2$class <- 0
for (i in 1:nrow(MergedData2))
{
if(MergedData2$percent[i] > 75 && MergedData2$Exam == "March")
MergedData2$class[i] = "Distinction"
else if (MergedData2$percent[i] > 75 && MergedData2$Exam == "September")
MergedData2$class[i] = "dist_supplementary"
else if (MergedData2$percent[i] > 60 && MergedData2$Exam == "March")
MergedData2$class[i] = "I Class"
else if (MergedData2$percent[i] < 60 && MergedData2$Exam == "March")
MergedData2$class[i] = "Fail"
else if (MergedData2$percent[i] < 60 && MergedData2$Exam == "September")
MergedData2$class[i] = "Detained"
}
library(dummies)
exam <- dummy(MergedData2$Exam)
head(exam)
MergedData2<-merge(exam,MergedData2)
plot(x=c(MergedData2$ExamMarch,MergedData2$ExamSeptember),y=mean(MergedData2$percent))
plot(MergedData2$Exam)
?plot
plot(MergedData2$Exam,xlab="Month",ylab="Total Marks",main='Distribution of Marks wrt months')
library(ggplot2)
MergedData2
MergedData2$ExamMarch <- NULL
MergedData2$ExamSeptember <- NULL
MergedData2$ExamNA <- NULL
MergedData2
ggplot(MergedData2,aes(x=Exam))+
geom_bar()
+
theme_classic()
ggplot(MergedData2,aes(x=Exam,y = total))+
geom_bar()
+
theme_classic()
ggplot(MergedData2,aes(x=Exam))+
geom_bar()+
theme_classic()
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
geom_hline(yintercept=mean(y), color="red") +
theme_classic()
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
geom_hline(yintercept=mean(count), color="red") +
theme_classic()
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
geom_hline(yintercept=mean(total), color="red") +
theme_classic()
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
geom_hline(yintercept=mean(MergedData2$total), color="red") +
theme_classic()
MergedData2
rm(list=ls())
setwd('C:/Users/Mudit/Desktop/INSOFE/R_assignment')
exam = read.csv('Exam.csv',header = TRUE,na.strings = c('',' ',NA,'#','?','March '))
marks = read.csv('Marks.csv',header = TRUE,na.strings = c('',' ',NA,'#','?'))
#Sum of NA
sum(is.na(exam))
sum(is.na(marks))
MergedData<-merge(exam,marks,by.x="Student.ID",by.y="Studen.ID")
MergedData
str(MergedData)
library(DMwR)
num_data_mod<-centralImputation(num_data) #Cenral Imputation
num_data <- subset(MergedData,select = -c(Student.ID,Exam))
cat_data <- subset(MergedData,select = c(Student.ID,Exam))
library(DMwR)
num_data_mod<-centralImputation(num_data) #Cenral Imputation
sum(is.na(num_data_mod))
table(MergedData$Exam)
num_data_mod$ID <- seq.int(nrow(num_data))
num_data_mod
MergedData2 <- merge(cat_data,num_data_mod,by.x='Student.ID',by.y='ID')
MergedData2
str(MergedData2)
MergedData2$Student.ID <- as.factor(MergedData2$Student.ID)
str(MergedData2)
MergedData2$Subject.B <- as.integer(MergedData2$Subject.B)
str(MergedData2)
MergedData2$total = apply(MergedData2[,3:7], 1, sum)
MergedData2
MergedData2$Exam[is.na(MergedData2$Exam)] <- "March"
MergedData2$Exam
MergedData2
MergedData2$total = apply(MergedData2[,3:7], 1, sum)
MergedData2
MergedData2$percent = MergedData2$total / 5
MergedData2
MergedData2$class <- 0
for (i in 1:nrow(MergedData2))
{
if(MergedData2$percent[i] > 75 && MergedData2$Exam == "March")
MergedData2$class[i] = "Distinction"
else if (MergedData2$percent[i] > 75 && MergedData2$Exam == "September")
MergedData2$class[i] = "dist_supplementary"
else if (MergedData2$percent[i] > 60 && MergedData2$Exam == "March")
MergedData2$class[i] = "I Class"
else if (MergedData2$percent[i] < 60 && MergedData2$Exam == "March")
MergedData2$class[i] = "Fail"
else if (MergedData2$percent[i] < 60 && MergedData2$Exam == "September")
MergedData2$class[i] = "Detained"
}
MergedData2
library(ggplot2)
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
geom_hline(yintercept=mean(MergedData2$total), color="red") +
theme_classic()
ggplot(MergedData2,aes(x=Exam,y=mean(percent))) +
geom_bar() +
geom_hline(yintercept=mean(MergedData2$total), color="red") +
theme_classic()
g <- mean(MergedData2$percent)
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
theme_classic()
ggplot(MergedData2,aes(x=Exam,y=total)) +
geom_bar() +
theme_classic()
ggplot(MergedData2,aes(x=Exam)) +
geom_bar() +
theme_classic()
plot(x=MergedData2$Exam,y=MergedData2$percent)
abline(h = mean(MergedData2$percent))
abline(h = mean(MergedData2$percent),color='red')
abline(h = mean(MergedData2$percent),col='red')
theme_classic()
plot(x=MergedData2$Exam,y=MergedData2$percent)
abline(h = mean(MergedData2$percent),col='red')
library(vegan)
lsf.str("package:vegan")
MergedData2
num_data_2 <- subset(MergedData2,select = -c(MergedData2$class,Student.ID,Exam))
num_data_2 <- subset(MergedData2,select = -c(class,Student.ID,Exam))
num_data_2
num_data_2 <- decostand(num_data_2,"standardize")
num_data_2
idata <- load(iris)
idata <- data(iris)
idata
idata <- load(dataset = iris)
idata <- load(dataset = iris())
idata <- load(iris)
library(datasets)
idata <- data("iris")
idata
idata <- data(iris)
idata
?datasets
library(help ="datasets")
data(iris)
idata <- data(iris)
idata
load(iris)
idata <- library(iris)
idata <- iris
idata
table(idata)
pivot_table1 <- data.frame(colnames( c( Sepal.Length,Sepal.Width,Petal.Length,
Petal.Width),row.names = c(Min,Max,Avg,sd)),
dim = c(4,4))
pivot_table1 <- data.frame(dimnames(c(Min,Max,Avg,sd),c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)))
idata_num <- subset(idata,select = -c(Species))
idata_cat <- subset(idata,select = c(Species))
idata_num
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = c(Min,Max,Avg,sd),
c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,
dimnames = c("Min","Max","Avg","sd"),c("Sepal.Length","Sepal.Width"
,"Petal.Length","Petal.Width"))
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,
dimnames = list[c("Min","Max","Avg","sd"),c("Sepal.Length","Sepal.Width"
,"Petal.Length","Petal.Width")])
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,
dimnames = list[c("Min","Max","Avg","sd"),names(idata_num)])
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,
dimnames = list[c("Min","Max","Avg","sd"),
c(idata_num$Sepal.Length,idata_num$Sepal.Width,idata_num$Petal.Length,idata$Petal.Width)])
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,
dimnames = list[c("Min","Max","Avg","sd"),
c(idata_num[,1:4])])
dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num)))
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
pivot1
function(x){
min(x)
max(x)
mean(x)
sd(x)
}
function(idata_num$Sepal.Length)
function(Sepal.Length)
exit
?appply
?apply
pivot1
pivot1[1,] <- apply(idata_num$Sepal.Length,2,min)
pivot1[1,] <- apply(idata_num[,1:4],2,min)
pivot1
pivot1[2,] <- apply(idata_num[,1:4],2,max)
pivot1[3,] <- apply(idata_num[,1:4],2,mean)
pivot1[4,] <- apply(idata_num[,1:4],2,sd)
pivot1
function(x){
return(min(x))
return(max(x))
return(mean(x))
return(sd(x))
}
pivot2 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
pivot2
pivot2 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
for (i in pivot2[1:4,]) {
apply(idata_num[,1:4],2,function(x){return(min(x)) return(max(x)) return(mean(x)) return(sd(x))
})
}
pivot2 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
for (i in pivot2[1:4,]) {
apply(idata_num[,1:4],2,function(x){return(min(x)); return(max(x)); return(mean(x)); return(sd(x));})
}
pivot2
x <- idata_num
for (i in pivot2[1:4,]) {
apply(idata_num[,1:4],2,function(x){return(min(x)); return(max(x)); return(mean(x)); return(sd(x));})
}
pivot2
View(pivot2)
list=ls()
list
rm(c(pivot2,x))
rm(c('pivot2','x'))
rm('pivot2','x')
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
pivot1 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
pivot1[1,] <- apply(idata_num[,1:4],2,min)
pivot1[2,] <- apply(idata_num[,1:4],2,max)
pivot1[3,] <- apply(idata_num[,1:4],2,mean)
pivot1[4,] <- apply(idata_num[,1:4],2,sd)
pivot1
pivot2 <- matrix(nrow = 4,ncol = 4,byrow = TRUE,dimnames = list(c("Min","Max","Avg","sd"),c(names(idata_num))))
pivot2[,1] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2
pivot2[1,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2
pivot2[2,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2[2,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2[3,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2[1,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2[2,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2[3,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2[4,] <- apply(idata_num[,1:4],2,function(x){return (min(x));return(max(x));return(mean(x));return(sd(x))})
pivot2
pivot1
pivot2[1,] <- apply(idata_num[,1:4],2,function(x){return(min(x))})
pivot2[2,] <- apply(idata_num[,1:4],2,function(x){return(max(x))})
pivot2[3,] <- apply(idata_num[,1:4],2,function(x){return(mean(x))})
pivot2[4,] <- apply(idata_num[,1:4],2,function(x){return(sd(x))})
pivot2
pivot2[1,] <- apply(idata_num[,1:4],2,function(x){return(min(x))
return(max(x))
return(mean(x))
return(sd(x))
})
pivot2[1,]
pivot2[,1] <- apply(idata_num[,1:4],2,function(x){return(min(x),max(x),mean(x),sd(x))})
pivot2[,1] <- apply(idata_num[,1:4],2,function(x){v[,1] <- min(x)
v[,2] <- max(x)
v[,3] <- mean(x)
v[,4] <- sd(x)
return(v)
})
v <- matrix(data=NA,nrow=4,ncol=1,byrow=TRUE)
pivot2[,1] <- apply(idata_num[,1:4],2,function(x){v[1,] <- min(x)
v[2,] <- max(x)
v[3,] <- mean(x)
v[4,] <- sd(x)
return(v)
})
pivot2[1,] <- apply(idata_num[,1:4],2,function(x){v[1,] <- min(x)
v[2,] <- max(x)
v[3,] <- mean(x)
v[4,] <- sd(x)
return(v)
})
pivot2[1,] <- apply(idata_num[,1:4],2,function(x){return(min(x))})
pivot2[2,] <- apply(idata_num[,1:4],2,function(x){return(max(x))})
pivot2[3,] <- apply(idata_num[,1:4],2,function(x){return(mean(x))})
pivot2[4,] <- apply(idata_num[,1:4],2,function(x){return(sd(x))})
pivot2
?tapply
max_character <- data.frame(Sepal.length=tapply(iris$Sepal.Length,iris$Species,max),
Sepal.width=tapply(iris$Sepal.Width,iris$Species,max),
Petal.length=tapply(iris$Petal.Length,iris$Species,max),
Petal.width=tapply(iris$Petal.Width,iris$Species,max))
max_character
agg
?aggregate
max_character2 <- aggregate(Sepal.length~Sepal.width,data = iris,FUN=max)
max_character2 <- aggregate(data = iris,FUN=max)
max_character2 <- aggregate(Sepal.Length~Sepal.Width,data = iris,FUN=max)
max_character2
max_character2 <- aggregate(Sepal.Length~Species,Sepal.Width~Species,Petal.Length~Species,Petal.Width~Species,data = iris,FUN=max)
max_character2 <- aggregate(Sepal.Length~Species,data = iris,FUN=max)
max_character2
max_character2[,2]<- aggregate(Sepal.Width~Species,data = iris,FUN=max)
max_character2
max_character2 <- aggregate(names(1:4)~Species,data = iris,FUN=max)
max_character2 <- aggregate(names(iris[,1:4])~Species,data = iris,FUN=max)
max_character2 <- aggregate(c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)~Species,data = iris,FUN=max)
max_character2 <- aggregate(list(c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width))~Species,data = iris,FUN=max)
max_character2 <- aggregate(cbind((Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)~Species),data = iris,FUN=max)
max_character2 <- aggregate(cbind(('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')~Species),data = iris,FUN=max)
max_character2 <- aggregate(Species~c(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width),data = iris,FUN=max)
max_character2 <- aggregate(Species~ Sepal.Length,Sepal.Width,Petal.Length,Petal.Width ,data = iris,FUN=max)
max_character2 <- aggregate(Species~Sepal.Length,Species~Sepal.Width,Species~Petal.Length,Species~Petal.Width ,data = iris,FUN=max)
str(iris)
max_character2 <- aggregate(Sepal.Length~Species,Sepal.Width~Species,Petal.Length~Species,Petal.Width~Species,data = iris,FUN=max)
max_character2[,1] <- aggregate(Sepal.Length~Species,data = iris,FUN=max)
max_character2
max_character2 <- aggregate(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data = iris,FUN=max)
max_character2 <- aggregate(Sepal.Length+Sepal.Width+Petal.Length+Petal.Width~Species,data = iris,FUN=max)
max_character2
max_character2 <- aggregate(cbind(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)~Species,data = iris,FUN=max)
max_character2
?sample
?apply
iris$Rand <- apply(iris$Rand,1,FUN = sample(c(1,2,3),3))
iris$Rand <- 0
iris$Rand[i] = sample(c(1,2,3),3)
?sample
iris$Rand[i] = sample(c(1,2,3),3,replace = TRUE)
iris$Rand[i] = sample(1:3,3,replace = TRUE)
for (i in 1:nrow(iris)){
iris$Rand[i,] = sample(1:3,3,replace = TRUE)
}
iris$Rand[i] = sample(1:3,1,replace = TRUE)
iris$Rand
iris$Rand[i,] = sample(1:3,1,replace = TRUE)
iris$Rand[i,] = sample(1:3,1,replace = TRUE)
iris$Rand[i] = sample(1:3,1,replace = TRUE)
iris$Rand
iris$Rand[i] = sample(1:3,1,replace = F)
iris$Rand
iris$Rand = sample(1:3,1,replace = T)
iris$Rand
iris$Rand = sample(c(1,2,3),1,replace = T)
iris$Rand
iris$Rand = sample(c(1,2,3),3,replace = T)
iris$Rand
iris$Rand = sample(c(1,2,3),4,replace = T)
iris$Rand = sample(c(1,2,3),3,replace = T)
iris$Rand
iris$Rand = sample(1:3,3,replace = T)
iris$Rand
iris
iris$Rand <- apply(as.factor(iris$Rand))
iris$Rand <- apply(iris$Rand,2,as.factor(iris$Rand))
iris$Rand <- apply(iris$Rand,2,as.factor)
iris$Rand <- apply(iris$Rand,1,as.factor)
as.factor(iris$Rand)
str(iris)
iris$Rand <- as.factor(iris$Rand)
str(iris)
?aggregate
max_character3 <- aggregate(cbind(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)~Species+Rand,data = iris, FUN = mean)
max_character3
?do.call
max_character3 <- aggregate(cbind(Sepal.Length1,Sepal.Width,Petal.Length,Petal.Width)~Species+Rand,data = iris, FUN = mean)
max_character3 <- aggregate(cbind(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)~Species+Rand,data = iris, FUN = mean)
f <- function(x) {print(mean(x)) print(sd(x))}
f <- function(x) {print(mean(x)); print(sd(x))}
mean_character <- aggregate(cbind(Petal.Length,Petal.Length,Sepal.Width,Sepal.Width)~Species,data=iris,FUN = function(x) c(mn = mean(x), sd = length(x)))
mean_character
mean_character <- aggregate(cbind(Petal.Length,Sepal.Width)~Species,data=iris,FUN = function(x) c(mn = mean(x), sd = length(x)))
mean_character
v1 <- iris(1:120)
?subset
iris
v1 <- subset(iris,nrows(iris)<121)
v1 <- subset(iris,select = nrows(iris)<121)
v1 <- subset(iris,select = iris[120,])
v1 <- iris[1:120,]
v1
v2 <- iris[,121:150]
v2 <- iris[121:150,]
v2
v1$Species <-  NULL
v2$Species <-  NULL
v2
v1_mean <- mean(cbind(v1$Sepal.Length,v1$Sepal.Width,v1$Petal.Length,v1$Petal.Width))
v1_mean
v1_mean <- mean(c(v1$Sepal.Length,v1$Sepal.Width,v1$Petal.Length,v1$Petal.Width))
v1_mean
v1_mean <- mean(v1$Sepal.Length,v1$Sepal.Width,v1$Petal.Length,v1$Petal.Width)
v1_mean <- mean(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)
v1_mean <- mean('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
v1
v1_mean <- mean(v1[,1:4])
v1_mean
v1_mean <- aggregate(cbind(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width),data=iris,FUN=mean)
v1_mean <- aggregate(cbind('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width'),data=iris,FUN=mean)
v1_mean <- colMeans(iris[sapply(iris, is.numeric)])
v1_mean
v1_sd <- apply(v1,2,sd)
v1_sd
v1_sd <- apply(v1[,1:4],2,sd)
v1_sd
library(vegan)
?decostand
v1 <- decostand(iris[,1:4],method='Standardize',1)
v1 <- decostand(iris[,1:4],method='standardize',1)
v1
v2 <- decostand(iris[,1:4],method = 'v1',1)
v2 <- decostand(iris[,1:4],method = 'v1_mean',1)
ls("package:vegan")
lsf.str("package:vegan")
?scale
v1_mean
v2 <- scale(v2,center = v1_mean,scale = v1_sd)
names(v2)
v2[,5] <- NULL
names(v2)
v2 <- scale(v2,center = v1_mean,scale = v1_sd)
v2
?gsub
prod <- read.csv('Product_Purchase_Info.csv',header = TRUE)
prod
prod$Date <- format(as.Date(df$ddate), "%d/%m/%Y")
prod$Date <- format(as.Date(prod$Date), "%d/%m/%Y")
prod$Date
prod
prod <- read.csv('Product_Purchase_Info.csv',header = TRUE)
prod
#prod$Date <- format(as.Date(prod$Date), "%d/%m/%Y")
library(lubridate)
prod$Date <- dmy(prod$Date)
prod$Date
prod
library(reshape2)
?reshape
reshape(prod)
reshape(prod,direction = "wide")
reshape(prod,direction = "wide",sep="-")
reshape(prod$Date,direction = "wide",sep="-")
reshape(prod,direction = "wide",sep="-",idvar = "Product",timevar = "Date")
reshape(prod,direction = "wide",sep="-",idvar = "Date",timevar = "Product")
reshape(prod,direction = "long",sep="-",idvar = "Date",timevar = "Product")
reshape(prod,direction = "long",sep="-",idvar = "Product",timevar = "Date")
reshape(prod,direction = "long",sep="-",idvar = "Product",timevar = "Date",v.names = "Price")
reshape(prod,direction = "wide",sep="-",idvar = "Product",timevar = "Date",v.names = "Price")
reshape(prod,direction = "wide",sep="-",idvar = "Price",timevar = "Date",v.names = "Product")
